
Let True  Not Not 1.
Let False Not Not 0.

Alias Add +.
Alias Multiply *.
Alias Subtract -.
Alias Divide /.
Alias Modulo %.
Alias Power ^.

Def != (Not ==).
Alias Equal ==.
Alias Eq ==.
Alias NotEqual !=.
Alias NotEq !=.

Def Drop (Let _).
Def Swap (Let X. Let Y. Y X).
Def Twin (Let X. X X).
Alias \ Swap.

Def >= (<= \).
Def > (Let X. Let Y. And != X Y >= X Y).
Def < (Let X. Let Y. And != X Y <= X Y).
Alias Greater >.
Alias GreaterOrEq >=.
Alias Lesser <.
Alias LesserOrEq <=.

Alias Concat Concatenate.

Def Increment (+ 1).
Def Decrement (- \ 1).
Alias Inc Increment.
Alias Dec Decrement.

Def Unless (If Not).
Def $ (Do \).

Def Int?    (== "Int"    TypeOf).
Def Float?  (== "Float"  TypeOf).
Def String? (== "String" TypeOf).
Def Bool?   (== "Bool"   TypeOf).
Def List?   (== "List"   TypeOf).
Def Block?  (== "Block"  TypeOf).
Def Number? (Or Int? Float? Twin).

Def Int!    (Let X. Do If Int?    X then `X else (Raise "Expected an Int"   )).
Def Float!  (Let X. Do If Float?  X then `X else (Raise "Expected a Float"  )).
Def String! (Let X. Do If String? X then `X else (Raise "Expected a String" )).
Def Bool!   (Let X. Do If Bool?   X then `X else (Raise "Expected a Bool"   )).
Def List!   (Let X. Do If List?   X then `X else (Raise "Expected a List"   )).
Def Block!  (Let X. Do If Block?  X then `X else (Raise "Expected a Block"  )).
Def Number! (Let X. Do If Number? X then `X else (Raise "Expected a Number" )).

Def Break (Raise "$_adduce_internal__BREAK_").
Def Breakpoint (Catch (Let E. Do If == E "$_adduce_internal__BREAK_" () (Raise E)). Do).

Def While (
  Def Cond. Def Body.
  Loop (Let B Cond. Do If B `Body `Break).
).

Def For (
  Def Body \.
  Drop Loop (Let L List!. Body Do (Catch `Break. Head L). Tail L).
).
Def Reduce (For \).

Def Length (Reduce (Inc Drop) \ 0).

Def Get (
  Let Index Int!. Let Items List!.
  Catch (Raise Join List ("Index out of bounds; tried to Get index ", Index, " but the max index was ", Dec Length Items) '').
  Drop While (> Index Twin) (Tail Swap. Inc Swap) 0 Items.
  Head.
).

Def Sum (Let Items List!. For Items `+ from 0).       ; Returns the sum of a list of numbers.
Def Product (Let Items List!. For Items `* from 1).   ; Returns the product of a list of numbers.

; Creates a List containing Value a given number of Times.
Def Repeat (
  Let Value be from the stack.
  Let Times Int!.
  List (Drop While (> Times Twin) (Value. Inc Swap) 0).
).

; Reverses a list.
Def Reverse (Let Items. List (For Items ())).

; Applies a given Body to each of the Items in a List, returning a new List of the results.
Def Map (Def Body. MapI (Body Drop Swap)).

; Create a List of numbers between a LowerBound (inclusive) and UpperBound (exclusive).
Def Range (
  Let LowerBound Int!.
  Let UpperBound Int!.
  MapI `+ over Repeat LowerBound, Dec UpperBound times.
).

; Join a List into a String, with the given delimiter interspersed.
Def Join (
  Let Items List!.
  Let Delim String!.
  Let Items be the Reverse Tail of Map (ToString \ Delim) over Items.
  Reduce by `Concat over the Items starting from ''.
).

